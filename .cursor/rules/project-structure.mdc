---
description: Project directory structure and important files overview for the Visuals image gallery application
globs: **/*
alwaysApply: true
---
# Visuals Project Structure

This rule outlines the directory structure and organization of the **Visuals** project - a React/TypeScript image gallery and sharing platform built with Convex backend.

## Project Overview

**Visuals** is a curated image gallery and sharing platform that provides:
- User authentication with Convex Auth
- Image upload, search, and categorization
- Social features (likes, collections, views)
- Responsive masonry layout with Tailwind CSS
- Real-time updates via Convex subscriptions
- TypeScript-first development experience

## Root Directory Structure

```
pindeck/
├── 📁 .cursor/           # 🛠️ Development rules & guidelines
├── 📁 convex/           # 🗄️ Backend & database (Convex)
├── 📁 src/             # 🎨 Frontend application (React/TypeScript)
├── 📁 dist/            # 📦 Build output (generated)
├── 📁 node_modules/    # 📚 Dependencies (not tracked)
├── 📄 package.json     # 📋 Project configuration
├── 📄 README.md        # 📖 Project documentation
└── 📄 *.config.*       # ⚙️ Build & development configs
```

## Cursor Rules Directory (`/.cursor/`)

**Purpose**: Development guidelines, coding standards, and project-specific rules for Cursor IDE.

```
.cursor/
└── rules/
    ├── cursor-rules.mdc         # 📝 Rules management guide
    ├── project-structure.mdc    # 🗂️ This file (structure guide)
    └── self-improve.mdc         # 🔄 Continuous improvement guidelines
```

## Convex Backend Directory (`/convex/`)

**Purpose**: Server-side logic, database schema, and API endpoints using Convex framework.

```
convex/
├── 📁 _generated/              # 🤖 Auto-generated files
│   ├── api.d.ts               # TypeScript API definitions
│   ├── api.js                 # JavaScript API functions
│   ├── dataModel.d.ts         # Database model types
│   ├── server.d.ts            # Server-side types
│   └── server.js              # Server-side code
│
├── auth.config.ts             # 🔐 Authentication configuration
├── auth.ts                    # 👤 Authentication logic
├── http.ts                    # 🌐 HTTP utilities & external APIs
├── images.ts                  # 🖼️ Image CRUD, search, likes API
├── router.ts                  # 🛣️ API route definitions
├── schema.ts                  # 📊 Database schema & indexes
├── seed.ts                    # 🌱 Database seeding script
└── tsconfig.json              # ⚙️ Backend TypeScript config
```

## Source Directory (`/src/`)

**Purpose**: Frontend React application with TypeScript, featuring image gallery components and user authentication.

```
src/
├── 📁 components/             # 🧩 Reusable React components
│   ├── CategoryFilter.tsx    # 🏷️ Category filtering UI
│   ├── ImageGrid.tsx         # 🎯 Main image display (masonry)
│   ├── ImageModal.tsx        # 🔍 Image detail modal
│   └── SearchBar.tsx         # 🔎 Search functionality
│
├── 📁 lib/                   # 🛠️ Utilities & helpers
│   └── utils.ts              # 🎨 Tailwind CSS utilities
│
├── App.tsx                   # 🎪 Main application component
├── index.css                 # 🎨 Global styles & Tailwind
├── main.tsx                  # 🚀 Application entry point
├── SignInForm.tsx            # 📝 User authentication form
├── SignOutButton.tsx         # 🚪 Sign-out functionality
└── vite-env.d.ts             # ⚙️ Vite environment types
```

## Components Directory (`/src/components/`)

**Purpose**: Modular React components for the image gallery interface.

```
src/components/
├── CategoryFilter.tsx        # 🏷️ Filter images by category
├── ImageGrid.tsx            # 🎯 Responsive masonry grid layout
├── ImageModal.tsx           # 🔍 Full-screen image viewer
└── SearchBar.tsx            # 🔎 Real-time search interface
```

## Build Output Directory (`/dist/`)

**Purpose**: Production-ready build artifacts generated by Vite.

```
dist/
├── index.html               # 📄 Main HTML template
└── assets/                  # 📦 Compiled bundles
    ├── index-*.js          # ⚡ Compiled JavaScript
    └── index-*.css         # 🎨 Compiled CSS styles
```

## Key Configuration Files

### Package Management
- `package.json` - 📦 Main project dependencies, scripts, and metadata
- `bun.lock` - 🔒 Bun package manager lock file
- `bunfig.toml` - ⚙️ Bun configuration

### Build & Development
- `vite.config.ts` - ⚡ Vite build tool configuration
- `tsconfig.json` - 📘 Root TypeScript configuration
- `tsconfig.app.json` - 🎨 Frontend TypeScript config
- `tsconfig.node.json` - 🟢 Node.js TypeScript config

### Code Quality & Styling
- `eslint.config.js` - 🔍 ESLint linting rules
- `tailwind.config.js` - 🎨 Tailwind CSS configuration
- `postcss.config.cjs` - 🎯 PostCSS configuration
- `components.json` - 🧩 shadcn/ui component configuration

### Development Tools
- `.gitignore` - 🚫 Git ignore rules
- `setup.mjs` - 🛠️ Project setup script
- `index.html` - 🌐 Main HTML template

## Component Organization Patterns

### React Components (`/src/components/`)
- **Functional components**: Modern React hooks-based
- **TypeScript interfaces**: Strongly typed props and state
- **Tailwind styling**: Utility-first CSS approach
- **Modular exports**: Clean import/export patterns

### Convex Backend (`/convex/`)
- **Query/Mutation pattern**: Convex's reactive data fetching
- **Type safety**: Full TypeScript integration
- **Real-time updates**: Live data synchronization
- **Authentication integration**: User-based data access

## File Naming Conventions

### React Components
- **PascalCase**: `ImageGrid.tsx`, `CategoryFilter.tsx`
- **Descriptive names**: Clear component purpose
- **Consistent suffixes**: `.tsx` for TypeScript React

### Backend Functions
- **camelCase**: `images.ts`, `auth.ts`, `http.ts`
- **Purpose-driven**: API functionality clearly indicated
- **TypeScript**: `.ts` for backend, `.d.ts` for definitions

### Configuration Files
- **kebab-case**: `tailwind.config.js`, `vite.config.ts`
- **Tool-specific**: Standard naming conventions
- **Clear extensions**: `.config.js`, `.config.ts`

## Database Schema Structure

```typescript
// Main data models in convex/schema.ts
const images = {
  title: string,
  description?: string,
  imageUrl: string,
  category: string,
  tags: string[],
  uploadedBy: userId,
  likes: number,
  views: number
}

const collections = {
  name: string,
  userId: userId,
  isPublic: boolean,
  imageIds: imageId[]
}

const likes = {
  userId: userId,
  imageId: imageId
}
```

## Key Architectural Patterns

### Frontend Architecture
- **Component Structure**: Modular React components in `src/components/`
- **State Management**: Local state with React hooks, Convex for server state
- **Styling**: Tailwind CSS with utility-first approach
- **Authentication**: Convex Auth with protected routes

### Backend Architecture
- **Database**: Convex with defined schema and indexes
- **API Layer**: Generated API functions with type safety
- **Authentication**: Integrated auth system with user management
- **File Storage**: Convex storage for image uploads

### Development Workflow
- **Build Tool**: Vite for fast development and optimized builds
- **Package Manager**: Bun for dependency management
- **Linting**: ESLint with TypeScript support
- **Type Safety**: Full TypeScript coverage across frontend and backend

## Important Files Reference

```typescript
// Main entry point
[src/main.tsx](mdc:src/main.tsx)

// Core application logic
[src/App.tsx](mdc:src/App.tsx)

// Database schema
[convex/schema.ts](mdc:convex/schema.ts)

// Authentication setup
[convex/auth.config.ts](mdc:convex/auth.config.ts)

// Image management API
[convex/images.ts](mdc:convex/images.ts)
```

## File Organization Guidelines

### ✅ Good: Consistent Structure
```
src/
├── components/     # UI components
├── lib/           # Utilities and helpers
├── main.tsx       # Entry point
└── App.tsx        # Main app component
```

### ❌ Bad: Mixed Organization
```
src/
├── utils.ts       # Should be in lib/
├── Header.tsx     # Should be in components/
└── api/           # Should follow backend patterns
```

## Navigation Tips

- Start with `src/App.tsx` for understanding the application flow
- Check `convex/schema.ts` for data models and relationships
- Review `package.json` for available scripts and dependencies
- Use `src/components/` for understanding UI patterns
- Reference `.cursor/rules/` for development guidelines